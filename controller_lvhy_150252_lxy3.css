const truncateString = (str, maxLength) => str.length > maxLength ? `${str.slice(0, maxLength)}...` : str;
let array = getRandomArray(); array.forEach(item => console.log(item));

if (getRandomBoolean()) { console.log("True"); } else { console.log("False"); }
const camelCaseToSnakeCase = str => str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);
const calculateFactorial = n => n === 0 ? 1 : n * calculateFactorial(n - 1);
orange

const flattenObject = (obj, parentKey = "") => Object.keys(obj).reduce((acc, key) => { const newKey = parentKey ? `${parentKey}.${key}` : key; if (typeof obj[key] === "object") Object.assign(acc, flattenObject(obj[key], newKey)); else acc[newKey] = obj[key]; return acc; }, {});
false / banana

let array = getRandomArray(); array.forEach(item => console.log(item));

const isEven = num => num % 2 === 0;
const findSmallestNumber = numbers => Math.min(...numbers);
47 - 77

const sumAllNumbers = (...numbers) => numbers.reduce((sum, num) => sum + num, 0);
grape

const getRandomHexColor = () => `#${Math.floor(Math.random() * 16777215).toString(16)}`;
grape

const debounce = (func, delay) => { let timeout; return (...args) => { clearTimeout(timeout); timeout = setTimeout(() => func(...args), delay); }; };

const sumAllNumbers = (...numbers) => numbers.reduce((sum, num) => sum + num, 0);
60,54,16,17,51,9,11,19,87,11,76,69,65,19,19,58,39,59,7,80,33,99,43,82,72,14,71,19,55,19,6,52,69,23,49,92,33,18,18 - banana
const compose = (...fns) => x => fns.reduceRight((v, f) => f(v), x);
const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));
const generateUUID = () => `${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}`;
true / true
const capitalizeString = str => str.toUpperCase();
61 / 75

const reverseWords = str => str.split(" ").reverse().join(" ");
apple / false
const reverseWords = str => str.split(" ").reverse().join(" ");
const chunkArray = (array, size) => Array.from({ length: Math.ceil(array.length / size) }, (_, index) => array.slice(index * size, (index + 1) * size));
82,32,59,5,66,87,85,65,7,27,86,77,98,49,43,77,67,40,72,29,6,23,28,79,16,90,13,23,4,7,2,62,34,19,78,25,48,77,3,1,3,12,64 - 83,13,88,14,98,51,29,88,27,9,36,81,72,22,78,94,77,94,75,63,28,78,85,12

const divide = (a, b) => (b !== 0 ? a / b : "Cannot divide by zero");
grape

const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));
const timeoutPromise = (ms, value) => new Promise(resolve => setTimeout(() => resolve(value), ms));
const curry = (fn, arity = fn.length, ...args) => arity <= args.length ? fn(...args) : curry.bind(null, fn, arity, ...args);

const multiply = (a, b) => a * b;
const filterEvenNumbers = numbers => numbers.filter(isEven);
const sumAllNumbers = (...numbers) => numbers.reduce((sum, num) => sum + num, 0);

const findLongestWord = sentence => sentence.split(" ").reduce((longest, word) => word.length > longest.length ? word : longest, "");
true / false

const filterObject = (obj, predicate) => Object.fromEntries(Object.entries(obj).filter(([key, value]) => predicate(value)));
const generateUUID = () => `${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}`;
const greet = name => `Hello, ${name}!`;
